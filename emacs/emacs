

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))


;;Prevent stupid startup message
(setq inhibit-startup-message t)


(add-to-list 'load-path "~/projects/linux_confs/emacs/emacs.d")


;; Yasnippet: add tab completion based on pre-programmed snippets
(add-to-list 'load-path "~/.emacs.d/elpa/yasnippet-20170601.1907")
(require 'yasnippet)
(yas-global-mode 1)
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))




(setq frame-title-format (concat  "%b - emacs@" (system-name)))

;; Set font to a readable size
;;(set-default-font "-adobe-courier-medium-r-normal--14-140-75-75-m-90-iso8859-1")
;; The above is never on new systems, so instead set font to reasonable size. Divide height by 10 to get pt.. 140=14pt
(set-face-attribute 'default nil :height 120)


;; Set shift-arrow to be select region
(setq pc-select-selection-keys-only t)
;;(pc-selection-mode 1)

;; Let del key 
(delete-selection-mode 1)

;; Others
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-default nil)
 '(backup-inhibited t t)
 '(blink-matching-paren t)
 '(column-number-mode t)
 '(current-language-environment "English")
 '(overwrite-mode nil t)
 '(package-selected-packages (quote (markdown-mode auto-yasnippet yasnippet ##)))
 '(scroll-bar-mode (quote right))
 '(show-paren-mode t)
 '(tab-width 3)
 '(transient-mark-mode t)
 '(vhdl-electric-mode nil)
 '(vhdl-indent-tabs-mode t)
 '(vhdl-intelligent-tab nil)
 '(vhdl-prompt-for-comments nil)
 '(vhdl-self-insert-comments nil)
 '(vhdl-stutter-mode nil))

;;'(paren-mode (quote blink-paren) nil (paren))


;; Always end a file with a newline
(setq require-final-newline t)

;; Stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)



; Convert a buffer from dos ^M end of lines to unix end of lines
(defun dos2unix ()
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match "")))

;vice versa
(defun unix2dos ()
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\n" nil t) (replace-match "\r\n")))

;;(require 'color-theme)
;;    (color-theme-initialize)
;;    (color-theme-cdu)
;;(require 'color-theme)
;;(eval-after-load "color-theme"
;;  '(progn
;;      (color-theme-initialize)
;;      (color-theme-cdu)))
;; Laptop.. colors not working?
;;(require 'color-theme)
;;     (color-theme-initialize)
;;     (color-theme-deep-blue)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-comment-face ((t (:foreground "royalBlue"))))
 '(font-lock-preprocessor-face ((t (:foreground "slate Blue")))))




;; Basic Key bindings
;;  Frames: Toggle between frames (c-tab or c-q)
;;          Terminal mode doesn't do c-tab right. Kludge is to switch
;;          to c-q. c-q is normally insert octal digit, which I don't use
;;(if (display-graphic-p)
;;    (progn
;;
;;        (global-set-key "\C-q"  `next-multiframe-window)  ;; Nongraphical
;;)
;; Screw it, do both
(global-set-key [C-tab] `next-multiframe-window)
(global-set-key "\C-q"  `next-multiframe-window)

;;  Kill : Whole line (M-k)
(global-set-key "\M-k" `kill-whole-line)
;; todo: con-0 con-k does kill to beginning. con-0 doesn't work
;;       on terminal mode. Use alt-0 con-k instead
;;(global-set-key "\C-k" '(lambda () (interactive) (kill-line 0)) ) ;M-k kills to the left

;;  Buffers : Cycle through buffers (c-sh-tab)
(global-set-key [C-S-iso-lefttab] `next-buffer)

(global-set-key "\M-g" 'goto-line)


(global-set-key [f5] 'compile)
(global-set-key [f6] 'kill-compilation)
(global-set-key [f9] 'org-decrypt-entry)


(autoload 'matlab-mode "~/.emacs.d/matlab.el" "Enter Matlab mode." t)
(setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist)) 
(autoload 'matlab-shell "~/.emacs.d/matlab.el" "Interactive Matlab mode." t) 

;;; cperl-mode is preferred to perl-mode                                        
(defalias 'perl-mode 'cperl-mode)


;; == gpg ==
;; probably the better, official version==> (require 'pgg)
;; note: now outdated, use easypg
;; (require 'pgg)

;;EasyPG - new built in version in emacs 23, which isn't in Fedora yet
;;(require 'epa-file)
;;(epa-file-enable)

;; The below though worked out of box. May have issues with unencrypted sitting next to file
;;(autoload 'alpaca-after-find-file "alpaca" nil t)
;;(add-hook 'find-file-hooks 'alpaca-after-find-file)



;;CDU NEVER use tabs, use a small number for indents
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 2)


;; Allow regions to be c-x c-u converted
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)

;;Prevent auto horizontal splits - trying to stop compile window
(setq split-width-threshold most-positive-fixnum)


;; Latex: strip out eol for text
(defun unscewqup-paragraph (beg end)
 (interactive "r")
 (shell-command-on-region beg end "fmt -w2000" nil t))


;;(add-to-list 'load-path "/opt/go/misc/emacs" t)
;;(require 'go-mode-load)


;; Newer version has tool bar that just eats up space
(tool-bar-mode 0)


;; Org mode
(add-to-list 'load-path "~/projects/linux_confs/emacs/org-mode/lisp")
(add-to-list 'load-path "~/projects/linux_confs/emacs/org-mode/contrib/lisp" t)

(setq org-directory "~/projects/notes/stubs")
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
(setq org-log-done 'time)


(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; set key here or nil for symmetric encryption
(setq org-crypt-key nil)


 (setq org-capture-templates
      '(("t" "Work Todo" entry (file+headline "~/.notes/work/todo.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
       ("T" "Home Todo" entry (file+headline "~/.notes/home/todo.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/.notes/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")
        ("p" "Person" entry (file+datetree "~/.notes/people.org")
             "* %?\nMy person on %U\n  %i\n  %a")))


;; Change todo list to auto done when children done?
(defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
     
(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)



(org-babel-do-load-languages
 'org-babel-load-languages
 '((ditaa . t))) ; this line activates ditaa


(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))



;; Make latex docs wrap around
(add-hook 'latex-mode-hook 'longlines-mode)

;; CDU: This seems to work
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
      (color-theme-initialize)
      (color-theme-cdu)))



(defun my-c-setup ()
   (c-set-offset 'innamespace [0]))
(add-hook 'c++-mode-hook 'my-c-setup)


;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))

;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)
